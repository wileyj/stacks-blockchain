##
## Bitcoin Integration Tests
##

name: Bitcoin Integration Tests

# Only run when:
#   - PRs are (re)opened against master branch

on:
  workflow_dispatch:
  pull_request:
    types:
      - opened
      - reopened

env:
  RUSTFLAGS: "-Cinstrument-coverage"
  LLVM_PROFILE_FILE: "stacks-blockchain-%p-%m.profraw"
  BTC_VERSION: "0.20.0"
  BITCOIND_TEST: 1
  RUST_BACKTRACE: full

concurrency:
  group: stacks-bitcoin-integration-tests-${{ github.ref }}
  # Only cancel in progress if this is for a PR
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  cache-cargo:
    name: Cargo Cache
    runs-on: ubuntu-latest
    steps:
      - name: Check Cargo Cache
        uses: actions/cache@v3
        id: check_cache
        with:
          lookup-only: true
          path: ~/.cargo
          key: ${{ github.event.repository.name }}-cargo
          # key: ${{ github.event.repository.name }}-${{ github.sha }}-cargo

      - name: Install nextest
        if: steps.check_cache.outputs.cache-hit != 'true'
        id: install_nextest
        uses: taiki-e/install-action@nextest

      - name: Install grcov
        if: steps.check_cache.outputs.cache-hit != 'true'
        id: install_grcov
        uses: taiki-e/install-action@grcov

      - name: Save Cache
        if: steps.check_cache.outputs.cache-hit != 'true'
        id: save_cache
        uses: actions/cache/save@v3
        with:
          path: ~/.cargo
          key: ${{ github.event.repository.name }}-cargo
          # key: ${{ github.event.repository.name }}-${{ github.sha }}-cargo
          # key: ${{ github.event.repository.name }}-${{ github.sha }}-${{ github.run_id }}-cargo

  ##
  ## it is expected that this cache will exist longer so other runs can use it
  ##

  cache-bitcoin-binary:
    name: Bitcoin Binary Cache
    runs-on: ubuntu-latest
    steps:
      - name: Check Bitcoin Cache
        uses: actions/cache@v3
        id: check_cache
        with:
          lookup-only: true
          path: /tmp/bitcoin
          key: ${{ github.event.repository.name }}-bitcoin-binaries

      - name: Install Bitcoin Binary
        if: steps.check_cache.outputs.cache-hit != 'true'
        id: bitcoin_binary
        run: |
          curl -LSf https://bitcoin.org/bin/bitcoin-core-${BTC_VERSION}/bitcoin-${BTC_VERSION}-x86_64-linux-gnu.tar.gz | tar zxf - -C /tmp
          mv /tmp/bitcoin-${BTC_VERSION} /tmp/bitcoin

      - name: Save Cache
        if: steps.check_cache.outputs.cache-hit != 'true'
        id: save_cache
        uses: actions/cache/save@v3
        with:
          path: /tmp/bitcoin
          key: ${{ github.event.repository.name }}-bitcoin-binaries

  cache-test-archive:
    name: Test Archive Cache
    runs-on: ubuntu-latest
    needs:
      - cache-cargo
    steps:
      - name: Check Test Archive Cache
        uses: actions/cache@v3
        id: check_archive_cache
        with:
          lookup-only: true
          path: /tmp/test_archive.tar.zst
          key: ${{ github.event.repository.name }}-test-archive
          # key: ${{ github.event.repository.name }}-${{ github.sha }}-test-archive

      - name: Check Target Cache
        uses: actions/cache@v3
        id: check_target_cache
        with:
          lookup-only: true
          path: ./target/debug
          key: ${{ github.event.repository.name }}-target-debug
          # key: ${{ github.event.repository.name }}-${{ github.sha }}-target-debug

      - name: Checkout the latest code
        if: ${{ steps.check_target_cache.outputs.cache-hit != 'true' || steps.check_archive_cache.outputs.cache-hit != 'true' }}
        id: git_checkout
        uses: actions/checkout@v3

      - name: Setup Rust Toolchain
        if: ${{ steps.check_target_cache.outputs.cache-hit != 'true' || steps.check_archive_cache.outputs.cache-hit != 'true' }}
        id: setup_rust_toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: llvm-tools-preview

      - name: Restore Cargo Cache
        if: ${{ steps.check_target_cache.outputs.cache-hit != 'true' || steps.check_archive_cache.outputs.cache-hit != 'true' }}
        id: restore_cargo_cache
        uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          path: ~/.cargo
          key: ${{ github.event.repository.name }}-cargo
          # key: ${{ github.event.repository.name }}-${{ github.sha }}-cargo

      - name: Build and Archive Tests
        if: ${{ steps.check_target_cache.outputs.cache-hit != 'true' || steps.check_archive_cache.outputs.cache-hit != 'true' }}
        id: archive_tests
        run: |
          cargo nextest archive \
            --build-jobs 8 \
            --workspace \
            --tests \
            --locked \
            --archive-file /tmp/test_archive.tar.zst

      - name: Cache Nextest Archive
        if: ${{ steps.check_target_cache.outputs.cache-hit != 'true' || steps.check_archive_cache.outputs.cache-hit != 'true' }}
        id: save_nextest_cache
        uses: actions/cache/save@v3
        with:
          path: /tmp/test_archive.tar.zst
          key: ${{ github.event.repository.name }}-test-archive
          # key: ${{ github.event.repository.name }}-${{ github.sha }}-test-archive
          # key: ${{ github.event.repository.name }}-${{ github.sha }}-${{ github.run_id }}-test-archive

      - name: Cache Target
        if: ${{ steps.check_target_cache.outputs.cache-hit != 'true' || steps.check_archive_cache.outputs.cache-hit != 'true' }}
        id: save_target_cache
        uses: actions/cache/save@v3
        with:
          path: ./target/debug
          key: ${{ github.event.repository.name }}-target-debug
          # key: ${{ github.event.repository.name }}-${{ github.sha }}-target-debug
          # key: ${{ github.event.repository.name }}-${{ github.sha }}-${{ github.run_id }}-target-debug

      # - name: Upload archive to workflow
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: test_archive
      #     path: /tmp/test_archive.tar.zst
      #     retention-days: 2

  sampled-genesis:
    # if: ${{ false }}
    name: Sampled Genesis
    runs-on: ubuntu-latest
    needs:
      - cache-test-archive
      - cache-bitcoin-binary
    strategy:
      fail-fast: false
      max-parallel: 32
      matrix:
        test-name:
          - tests::neon_integrations::miner_submit_twice
          - tests::neon_integrations::microblock_integration_test
          - tests::neon_integrations::microblock_fork_poison_integration_test
          - tests::neon_integrations::size_check_integration_test
          - tests::neon_integrations::cost_voting_integration
          - tests::integrations::integration_test_get_info
          - tests::neon_integrations::bitcoind_integration_test
          - tests::neon_integrations::liquid_ustx_integration
          - tests::neon_integrations::stx_transfer_btc_integration_test
          - tests::neon_integrations::stx_delegate_btc_integration_test
          - tests::neon_integrations::bitcoind_forking_test
          - tests::neon_integrations::should_fix_2771
          - tests::neon_integrations::pox_integration_test
          - tests::neon_integrations::mining_events_integration_test
          - tests::bitcoin_regtest::bitcoind_integration_test ## panics quickly and fails (bitcoind)
          - tests::should_succeed_handling_malformed_and_valid_txs
          - tests::neon_integrations::size_overflow_unconfirmed_microblocks_integration_test
          - tests::neon_integrations::size_overflow_unconfirmed_stream_microblocks_integration_test
          - tests::neon_integrations::size_overflow_unconfirmed_invalid_stream_microblocks_integration_test
          - tests::neon_integrations::runtime_overflow_unconfirmed_microblocks_integration_test
          - tests::neon_integrations::antientropy_integration_test
          - tests::neon_integrations::filter_low_fee_tx_integration_test
          - tests::neon_integrations::filter_long_runtime_tx_integration_test
          - tests::neon_integrations::microblock_large_tx_integration_test_FLAKY
          - tests::neon_integrations::block_large_tx_integration_test
          - tests::neon_integrations::microblock_limit_hit_integration_test
          - tests::neon_integrations::block_limit_hit_integration_test
          - tests::neon_integrations::fuzzed_median_fee_rate_estimation_test_window5
          - tests::neon_integrations::fuzzed_median_fee_rate_estimation_test_window10
          - tests::neon_integrations::use_latest_tip_integration_test
          - tests::neon_integrations::test_flash_block_skip_tenure
          - tests::neon_integrations::test_chainwork_first_intervals
          - tests::neon_integrations::test_chainwork_partial_interval
          - tests::neon_integrations::test_problematic_txs_are_not_stored
          - tests::neon_integrations::test_problematic_blocks_are_not_mined
          - tests::neon_integrations::test_problematic_blocks_are_not_relayed_or_stored
          - tests::neon_integrations::test_problematic_microblocks_are_not_mined
          - tests::neon_integrations::test_problematic_microblocks_are_not_relayed_or_stored
          - tests::neon_integrations::push_boot_receipts
          - tests::epoch_205::test_dynamic_db_method_costs
          - tests::epoch_205::transition_empty_blocks
          - tests::epoch_205::test_cost_limit_switch_version205
          - tests::epoch_205::test_exact_block_costs
          - tests::epoch_205::bigger_microblock_streams_in_2_05
          - tests::epoch_21::transition_adds_burn_block_height
          - tests::epoch_21::transition_fixes_bitcoin_rigidity
          - tests::epoch_21::transition_adds_pay_to_contract
          - tests::epoch_21::transition_adds_get_pox_addr_recipients
          - tests::epoch_21::transition_adds_mining_from_segwit
          - tests::epoch_21::transition_removes_pox_sunset
          - tests::epoch_21::transition_empty_blocks
          - tests::epoch_21::test_pox_reorgs_three_flaps
          - tests::epoch_21::test_pox_reorg_one_flap
          # - tests::epoch_21::test_pox_reorg_flap_duel           ## very slow test
          # - tests::epoch_21::test_pox_reorg_flap_reward_cycles  ## very slow test
          - tests::epoch_21::test_pox_missing_five_anchor_blocks
          - tests::epoch_21::test_sortition_divergence_pre_21
          - tests::epoch_21::test_v1_unlock_height_with_current_stackers
          - tests::epoch_21::test_v1_unlock_height_with_delay_and_current_stackers
          - tests::epoch_21::trait_invocation_cross_epoch
          - tests::epoch_22::pox_2_unlock_all
          - tests::epoch_22::disable_pox
          - tests::epoch_22::test_pox_reorg_one_flap
          - tests::epoch_23::trait_invocation_behavior
          - tests::neon_integrations::bad_microblock_pubkey
          - tests::epoch_24::fix_to_pox_contract
          - tests::epoch_24::verify_auto_unlock_behavior
    steps:
      - name: Checkout the latest code
        id: git_checkout
        uses: actions/checkout@v3

      - name: Setup Rust Toolchain
        if: steps.check_cache.outputs.cache-hit != 'true'
        id: setup_rust_toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: llvm-tools-preview

      - name: Restore Cargo Cache
        id: restore_cargo_cache
        uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          path: ~/.cargo
          key: ${{ github.event.repository.name }}-cargo
          # key: ${{ github.event.repository.name }}-${{ github.sha }}-cargo

      - name: Restore Bitcoin Binary Cache
        id: restore_bitcoin_cache
        uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          path: /tmp/bitcoin
          key: ${{ github.event.repository.name }}-bitcoin-binaries

      - name: Restore Test Archive Cache
        id: restore_test-archive_cache
        uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          path: /tmp/test_archive.tar.zst
          key: ${{ github.event.repository.name }}-test-archive
          # key: ${{ github.event.repository.name }}-${{ github.sha }}-test-archive

      - name: Restore Target Cache
        id: restore_target_cache
        uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          path: ./target/debug
          key: ${{ github.event.repository.name }}-target-debug
          # key: ${{ github.event.repository.name }}-${{ github.sha }}-target-debug

      # - name: Download archive
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: test_archive

      - name: Link Bitcoin Binary
        id: bitcoin_binary
        run: |
          sudo ln -s /tmp/bitcoin/bin/bitcoind /bin/
          ls -al /bin/bitcoind

      - name: Run Tests
        id: run_tests
        run: |
          cargo nextest run \
            --test-threads num-cpus  \
            --run-ignored all \
            --archive-file /tmp/test_archive.tar.zst \
            --retries 2 \
            "${{ matrix.test-name }}"

      - name: Run grcov
        id: run_grcov
        run: |
          grcov . --binary-path ./target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore "/*" -o lcov.info || exit 1

      - name: Code Coverage
        id: code_coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./lcov.info
          name: ${{ matrix.test-name }}
          fail_ci_if_error: false

  # Run atlas integration tests
  atlas-test:
    # if: ${{ false }}
    name: Atlas Test
    runs-on: ubuntu-latest
    needs:
      - cache-test-archive
      - cache-bitcoin-binary
    strategy:
      fail-fast: false
      max-parallel: 16
      matrix:
        test-name:
          - tests::neon_integrations::atlas_integration_test
          - tests::neon_integrations::atlas_stress_integration_test
    steps:
      - name: Checkout the latest code
        id: git_checkout
        uses: actions/checkout@v3

      - name: Setup Rust Toolchain
        if: steps.check_cache.outputs.cache-hit != 'true'
        id: setup_rust_toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: llvm-tools-preview

      - name: Restore Cargo Cache
        id: restore_cargo_cache
        uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          path: ~/.cargo
          key: ${{ github.event.repository.name }}-cargo
          # key: ${{ github.event.repository.name }}-${{ github.sha }}-cargo

      - name: Restore Bitcoin Binary Cache
        id: restore_bitcoin_cache
        uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          path: /tmp/bitcoin
          key: ${{ github.event.repository.name }}-bitcoin-binaries

      - name: Restore Test Archive Cache
        id: restore_test-archive_cache
        uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          path: /tmp/test_archive.tar.zst
          key: ${{ github.event.repository.name }}-test-archive
          # key: ${{ github.event.repository.name }}-${{ github.sha }}-test-archive

      - name: Restore Target Cache
        id: restore_target_cache
        uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          path: ./target/debug
          key: ${{ github.event.repository.name }}-target-debug
          # key: ${{ github.event.repository.name }}-${{ github.sha }}-target-debug

      # - name: Download archive
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: test_archive

      - name: Link Bitcoin Binary
        id: bitcoin_binary
        run: |
          sudo ln -s /tmp/bitcoin/bin/bitcoind /bin/
          ls -al /bin/bitcoind

      - name: Run Tests
        id: run_tests
        run: |
          cargo nextest run \
            --test-threads num-cpus  \
            --run-ignored all \
            --archive-file /tmp/test_archive.tar.zst \
            --retries 2 \
            "${{ matrix.test-name }}"

      - name: Run grcov
        id: run_grcov
        run: |
          grcov . --binary-path ./target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore "/*" -o lcov.info || exit 1

      - name: Code Coverage
        id: code_coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./lcov.info
          name: ${{ matrix.test-name }}
          fail_ci_if_error: false

  delete-cache:
    if: ${{ false }}
    name: Delete Cache
    runs-on: ubuntu-latest
    needs:
      # - sampled-genesis
      - atlas-test
    steps:
      - name: Cleanup
        env:
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete ${{ github.event.repository.name }}-${{ github.sha }}-cargo -R ${{ github.repository }} --confirm
          gh actions-cache delete ${{ github.event.repository.name }}-${{ github.sha }}-test-archive -R ${{ github.repository }} --confirm
          gh actions-cache delete ${{ github.event.repository.name }}-${{ github.sha }}-target-debug -R ${{ github.repository }} --confirm
          echo "Done"
        # run: |
        #   gh extension install actions/gh-actions-cache
        #   gh actions-cache delete ${{ github.event.repository.name }}-${{ github.sha }}-${{ github.run_id }}-cargo -R ${{ github.repository }} --confirm
        #   gh actions-cache delete ${{ github.event.repository.name }}-${{ github.sha }}-${{ github.run_id }}-test-archive -R ${{ github.repository }} --confirm
        #   gh actions-cache delete ${{ github.event.repository.name }}-${{ github.sha }}-${{ github.run_id }}-test-archive -R ${{ github.repository }} --confirm
        #   echo "Done"
