## Github workflow to create reusable caches

name: Create Test Cache

on:
  workflow_dispatch:
  workflow_call:

defaults:
  run:
    shell: bash

env:
  RUSTFLAGS: "-Cinstrument-coverage"
  LLVM_PROFILE_FILE: "stacks-blockchain-%p-%m.profraw"
  BTC_VERSION: "0.20.0"

##
## Cache will exist longer than workflow execution so other runners have access
##   ex: a failed job should have access to the cache for however long `cleanup.yml` is set to delete old caches
##       however, this is only relevant if the commit sha does not change between runs

jobs:
  cargo:
    name: Cargo
    runs-on: ubuntu-latest
    steps:
      ## Perform a lookup to check if the cache already exists
      - name: Check Cargo Cache
        id: check_cache
        uses: wileyj/runner-cache/cargo@main

      ## If cargo cache is not found, install nextest
      - name: Install nextest
        if: steps.check_cache.outputs.cache-hit != 'true'
        id: install_nextest
        uses: taiki-e/install-action@7412a5eb82f4686390763b0f92637284e91b6627 # v2.15.3
        with:
          tool: nextest # can be versioned, ex: tool@1.1.1.1

      # cargo-llvm-cov instead?
      # https://github.com/taiki-e/cargo-llvm-cov
      ## If cargo cache is not found, install grcov
      - name: Install grcov
        if: steps.check_cache.outputs.cache-hit != 'true'
        id: install_grcov
        uses: taiki-e/install-action@7412a5eb82f4686390763b0f92637284e91b6627 # v2.15.3
        with:
          tool: grcov # can be versioned, ex: tool@1.1.1.1

      ## If cargo cache is not found, create it using commit sha
      - name: Save Cache
        if: steps.check_cache.outputs.cache-hit != 'true'
        id: save_cache
        uses: wileyj/runner-cache/cargo@main
        with:
          action: save

  bitcoin-binary:
    name: Bitcoin Binary
    runs-on: ubuntu-latest
    steps:
      ## Perform a lookup to check if the cache already exists
      - name: Check Bitcoin Cache
        id: check_cache
        uses: wileyj/runner-cache/bitcoin@main

      ## if bitcoin cache is not found, download and extract it
      - name: Install Bitcoin Binary
        if: steps.check_cache.outputs.cache-hit != 'true'
        id: bitcoin_binary
        run: |
          curl -LSf -# https://github.com/stacks-network/bitcoin/releases/download/v${BTC_VERSION}/bitcoin-${BTC_VERSION}-x86_64-linux-gnu.tar.gz | tar zxf - -C /tmp
          mv /tmp/bitcoin-${BTC_VERSION} /tmp/bitcoin

      ## If bitcoin cache is not found, create it (no sha is used since it is versioned)
      - name: Save Cache
        if: steps.check_cache.outputs.cache-hit != 'true'
        id: save_cache
        uses: wileyj/runner-cache/bitcoin@main
        with:
          action: save

  nextest-archive:
    name: Test Archive
    runs-on: ubuntu-latest
    needs:
      - cargo
    steps:
      ## Perform a lookup to check if the target cache already exists
      - name: Check Target Cache
        id: check_target_cache
        uses: wileyj/runner-cache/target@main

      ## Perform a lookup to check if the test archive cache already exists
      - name: Check Test Archive Cache
        id: check_test_archive_cache
        uses: wileyj/runner-cache/test-archive@main

      ## Perform a lookup to check if the genesis test archive cache already exists
      - name: Check Genesis Test Archive Cache
        id: check_genesis_archive_cache
        uses: wileyj/runner-cache/genesis-test-archive@main

      ## If any of the caches are found, checkout the code
      ##   - Target cache
      ##   - Test archive cache
      ##   - Genesis test archive cache
      - name: Checkout the latest code
        if: |
          steps.check_target_cache.outputs.cache-hit != 'true' || 
          steps.check_test_archive_cache.outputs.cache-hit != 'true' || 
          steps.check_genesis_archive_cache.outputs.cache-hit != 'true'
        id: git_checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3

      ## If any of the caches are found, install rust toolchain
      ##   - Target cache
      ##   - Test archive cache
      ##   - Genesis test archive cache
      - name: Setup Rust Toolchain
        if: |
          steps.check_target_cache.outputs.cache-hit != 'true' || 
          steps.check_test_archive_cache.outputs.cache-hit != 'true' || 
          steps.check_genesis_archive_cache.outputs.cache-hit != 'true'
        id: setup_rust_toolchain
        uses: actions-rust-lang/setup-rust-toolchain@f3c84ee10bf5a86e7a5d607d487bf17d57670965 # v1.5.0
        with:
          toolchain: stable
          components: llvm-tools-preview
          cache: false

      ## If any of the caches are found, restore the cargo cache
      ##   - Target cache
      ##   - Nextest archive cache
      ##   - Genesis nextest archive cache
      - name: Restore Cargo Cache
        if: |
          steps.check_target_cache.outputs.cache-hit != 'true' || 
          steps.check_test_archive_cache.outputs.cache-hit != 'true' || 
          steps.check_genesis_archive_cache.outputs.cache-hit != 'true'
        id: restore_cargo_cache
        uses: wileyj/runner-cache/cargo@main
        with:
          action: restore

      ## If any of the caches are found, build and archive tests
      ##   - Target cache
      ##   - Nextest archive cache
      ##   - Genesis nextest archive cache
      - name: Build and Archive Tests
        if: |
          steps.check_target_cache.outputs.cache-hit != 'true' || 
          steps.check_test_archive_cache.outputs.cache-hit != 'true' || 
          steps.check_genesis_archive_cache.outputs.cache-hit != 'true'
        id: archive_tests
        run: |
          cargo nextest archive \
            --build-jobs 8 \
            --workspace \
            --tests \
            --locked \
            --archive-file /tmp/test_archive.tar.zst

      ## If any of the caches are not found, build and archive genesis tests
      ##   - Target cache
      ##   - Nextest archive cache
      ##   - Genesis nextest archive cache
      - name: Build and Archive Genesis Tests
        if: |
          steps.check_target_cache.outputs.cache-hit != 'true' || 
          steps.check_genesis_archive_cache.outputs.cache-hit != 'true' || 
          steps.check_genesis_archive_cache.outputs.cache-hit != 'true'
        id: archive_genesis_tests
        run: |
          cd testnet/stacks-node && cargo nextest archive \
            --build-jobs 8 \
            --workspace \
            --tests \
            --locked \
            --features prod-genesis-chainstate \
            --archive-file /tmp/genesis_archive.tar.zst

      ## If any of the caches are not found, save test archive cache
      ##   - Target cache
      ##   - Nextest archive cache
      ##   - Genesis nextest archive cache
      - name: Cache Test Archive
        if: |
          steps.check_target_cache.outputs.cache-hit != 'true' || 
          steps.check_test_archive_cache.outputs.cache-hit != 'true' || 
          steps.check_genesis_archive_cache.outputs.cache-hit != 'true'
        id: save_nextest_cache
        uses: wileyj/runner-cache/test-archive@main
        with:
          action: save

      ## If any of the caches are not found, save genesis test archive cache
      ##   - Target cache
      ##   - Nextest archive cache
      ##   - Genesis nextest archive cache
      - name: Cache Genesis Archive
        if: |
          steps.check_target_cache.outputs.cache-hit != 'true' || 
          steps.check_test_archive_cache.outputs.cache-hit != 'true' || 
          steps.check_genesis_archive_cache.outputs.cache-hit != 'true'
        id: save_genesis_cache
        uses: wileyj/runner-cache/genesis-test-archive@main
        with:
          action: save

      ## If any of the caches are not found, save target cache
      ##   - Target cache
      ##   - Nextest archive cache
      ##   - Genesis nextest archive cache
      - name: Cache Target
        if: |
          steps.check_target_cache.outputs.cache-hit != 'true' || 
          steps.check_test_archive_cache.outputs.cache-hit != 'true' || 
          steps.check_genesis_archive_cache.outputs.cache-hit != 'true'
        id: save_target_cache
        uses: wileyj/runner-cache/target@main
        with:
          action: save
