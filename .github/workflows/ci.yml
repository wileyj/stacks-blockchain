name: CI

## Only run when:
##   - manually triggered
##   - PR's are (re)opened
##   - push to master (i.e. merge develop -> master)

on:
  # push:
  #   branches:
  #     - master
  # pull_request:
  workflow_dispatch:
    inputs:
      tag:
        description: "The tag to create (optional)"
        required: false
  pull_request_target:
    types:
      - opened
      - reopened
      - closed
      - synchronize
    paths-ignore:
      - "**.md"
      - "**.yml"
    # ## might be better to use inclusive v exclusive paths
    # paths:
    #   - "**.rs"
    #   - "**.clar"
  pull_request_review:
    types:
      - submitted
    paths-ignore:
      - "**.md"
      - "**.yml"
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  ##
  ## Execute on every PR, these are generic workflows
  ##   - rust format
  ##   - check for any leaked credentials
  ##   - build debian source image (if no tag is provided)

  ##
  ## rust format
  rustfmt:
    name: Rust Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the latest code
        id: git_checkout
        uses: actions/checkout@v3
      # - name: Define Rust Toolchain
      #   id: define_rust_toolchain
      #   run: echo "RUST_TOOLCHAIN=$(cat ./rust-toolchain)" >> $GITHUB_ENV
      - name: Setup Rust Toolchain
        id: setup_rust_toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          # toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rustfmt
          cache: false
      - name: Rustfmt
        id: rustfmt
        uses: actions-rust-lang/rustfmt@v1

  ## Checked for leaked credentials
  leaked-cred-test:
    name: Leaked Credential Test
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        id: extract_branch
        # if: ${{ github.event_name != 'pull_request' }}
        # run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
        run: echo "BRANCH_NAME=$(echo ${{ github.event.push.ref }} | sed -e 's!^refs/heads/!!')" >> $GITHUB_ENV

      # - name: Extract branch name
      #   id: extract_branch_pr
      #   if: ${{ github.event_name == 'pull_request' }}
      #   run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF})" >> $GITHUB_ENV
      - name: Branch name
        run: echo running on branch ${{ env.BRANCH_NAME }}
      - name: Checkout the latest code
        id: git_checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: TruffleHog Scan
        id: trufflehog_check
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ env.BRANCH_NAME }}
          head: HEAD
  #
  # clippy job
  #
  # audit job
  #
  #
  ## Build and push Debian image built from source
  ##  only if this is not a tagged build
  ## this will run on all PR updates
  build-source-image:
    if: ${{ inputs.tag == '' }}
    name: Docker Debian Source Image
    # uses: wileyj/stacks-blockchain/.github/workflows/image-build-debian-source.yml@master
    uses: ./.github/workflows/image-build-debian-source.yml
    needs:
      - rustfmt
      - leaked-cred-test
    secrets: inherit
    # secrets:
    #   DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
    #   DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}

  ## if:
  ##  - (input tag is provided) AND (is master branch and not a PR)
  ## then:
  ##  - create release
  ##
  ## This job will run the full suite of tests vi callable workflow
  ##  - atlas-tests
  ##  - slow-tests
  ##  - stacks-blockchain-tests
  create-release:
    # if: ${{ inputs.tag != '' }}
    # if: ${{ inputs.tag != '' || (github.ref != format('refs/heads/{0}', github.event.repository.default_branch) && !contains(github.ref, 'refs/pull')) }}
    if: ${{ inputs.tag != '' && (github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && !contains(github.ref, 'refs/pull')) }}
    name: Create Release
    # uses: wileyj/stacks-blockchain/.github/workflows/image-build-debian-source.yml@master
    uses: ./.github/workflows/image-build-debian-source.yml
    needs:
      - rustfmt
      - leaked-cred-test
    secrets: inherit

  ##
  ## Tests to run regularly
  ##
  ## if:
  ##  - ((input tag is not provided) AND (pr is approved))
  ## then:
  ##  - run subset of tests
  ##    - epoch-tests
  ##    - bitcoin tests
  ## if input tag *is* provided, these tests will run as part of the `create-release` workflow
  ##
  bitcoin-tests:
    if: ${{ github.event.review.state == 'approved' }}
    # if: ${{ inputs.tag == '' && github.event.review.state == 'approved' }}
    # if: ${{ (inputs.tag != '' && (github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && !contains(github.ref, 'refs/pull'))) || github.event.review.state == 'approved'  }}
    name: Bitcoin Tests
    # uses: wileyj/stacks-blockchain/.github/workflows/image-build-debian-source.yml@master
    uses: ./.github/workflows/bitcoin-tests.yml
    needs:
      - rustfmt
      - leaked-cred-test

  epoch-tests:
    if: ${{ github.event.review.state == 'approved' }}
    # if: ${{ inputs.tag == '' && github.event.review.state == 'approved' }}
    # if: ${{ (inputs.tag != '' && (github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && !contains(github.ref, 'refs/pull'))) || github.event.review.state == 'approved'  }}
    name: Epoch Tests
    # uses: wileyj/stacks-blockchain/.github/workflows/build-source-binary.yml@master
    uses: ./.github/workflows/epoch-tests.yml
    needs:
      - rustfmt
      - leaked-cred-test
