##
## Build the Docker Alpine image from the pre-built downloaded binary asset
##

name: Build Alpine Binary Image

# Only run when:
#   - manually triggered via the ci.yml workflow

on:
  #   # workflow_run:
  #   #   workflows: ["Build Distributable Binaries"]
  #   #   types:
  #   #     - completed
  #   push:
  #     tags:
  #       - "[0-9]+.[0-9]+.[0-9]+.[0-9]+.[0-9]+" # 2.1.0.0.0
  #       - "[0-9]+.[0-9]+.[0-9].[0-9]+.[0-9]+-rc[0-9]+" # 2.1.0.0.0-rc1
  # workflow_dispatch:
  #   inputs:
  #     tag:
  #       required: true
  #       type: string
  #       description: "semver tag for alpine images"
  #     # dist:
  #     #   required: true
  #     #   type: string
  #     #   description: "Linux Distribution"
  workflow_call:
    inputs:
      tag:
        required: true
        type: string
        description: "semver tag for alpine images"
      # dist:
      #   required: true
      #   type: string
      #   description: "Linux Distribution"
      # docker_platforms:
      #   required: true
      #   description: "Arch to buid alpine images"
      #   type: string
      #   default: "linux/arm64, linux/amd64, linux/amd64/v2, linux/amd64/v3"
    # secrets:
    #   DOCKERHUB_USERNAME:
    #     required: true
    #   DOCKERHUB_PASSWORD:
    #     required: true

defaults:
  run:
    shell: bash

env:
  docker_platforms: "linux/arm64, linux/amd64, linux/amd64/v2, linux/amd64/v3"

jobs:
  image:
    # Only run if a tag is provided manually
    if: inputs.tag != ''
    name: Build Docker Image
    runs-on: ubuntu-latest
    ## this can DRY the image build and make multiple files unneeded
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        dist:
          - alpine
          - debian

    steps:
      - name: Checkout the latest code
        id: git_checkout
        run: |
          echo "Checkout the latest code"

      - name: Set Vars
        id: set_vars
        run: |
          echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "GITHUB_REF_SHORT=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Set up QEMU
        id: docker_qemu
        run: |
          echo "Set up QEMU"

      - name: Set up Docker Buildx
        id: docker_buildx
        run: |
          echo "Set up Docker Buildx"

      - name: Login to DockerHub
        id: docker_login
        run: |
          echo "Login to DockerHub"

      - name: Docker Metadata ( ${{matrix.dist}} )
        if: ${{ matrix.dist == 'alpine' }}
        id: docker_metadata_alpine
        run: |
          echo "Docker Metadata ( ${{matrix.dist}} )"

      - name: Build and Push ( ${{matrix.dist}} )
        if: ${{ matrix.dist == 'alpine' }}
        id: docker_build_alpine
        run: |
          echo "Alpine Build and Push"

      - name: Docker Metadata ( ${{matrix.dist}} )
        if: ${{ matrix.dist == 'debian' }}
        id: docker_metadata_debian
        run: |
          echo "Docker Metadata ( ${{matrix.dist}} )"

      - name: Build and Push ( ${{matrix.dist}} )
        if: ${{ matrix.dist == 'debian' }}
        id: docker_build_debian
        run: |
          echo "Debian Build and Push"

      # - name: Build and Push
      #   if: ${{ matrix.dist == 'debian' }}
      #   id: docker_build
      #   uses: docker/build-push-action@v3
      #   with:
      #     file: ./.github/actions/dockerfiles/Dockerfile.${{ matrix.dist }}-binary
      #     platforms: ${{ env.docker_platforms }}
      #     tags: ${{ steps.docker_metadata.outputs.tags }}
      #     labels: ${{ steps.docker_metadata.outputs.labels }}
      #     build-args: |
      #       TAG=${{ inputs.tag}}
      #       STACKS_NODE_VERSION=${{ inputs.tag || env.GITHUB_SHA_SHORT }}
      #       GIT_BRANCH=${{ env.GITHUB_REF_SHORT }}
      #       GIT_COMMIT=${{ env.GITHUB_SHA_SHORT }}
      #     push: true
