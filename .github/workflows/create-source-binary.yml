## Github workflow to create multi-arch binaries from source

name: Create Binaries

on:
  workflow_call:
    inputs:
      tag:
        description: "Tag name of this release (x.y.z)"
        required: true
        type: string
      arch:
        description: "Stringified JSON object listing of platform matrix"
        required: true
        type: string
        default: >-
          ["linux-glibc-x64", "linux-musl-x64", "linux-glibc-arm64", "linux-musl-arm64", "macos-x64", "macos-arm64", "windows-x64"]

defaults:
  run:
    shell: bash

## change the display name to the tag being built
run-name: ${{ inputs.tag }}

jobs:
  ## Runs when the following is true:
  ##  - tag is provided
  ##  - workflow is building default branch (master)
  artifact:
    if: |
      inputs.tag != '' && 
      github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
    name: Build Binaries
    runs-on: ubuntu-latest
    strategy:
      ## Run a maximum of 8 builds concurrently, using the matrix defined in inputs.arch
      max-parallel: 8
      matrix:
        platform: ${{ fromJson(inputs.arch) }}
    steps:
      ## Checkout the code
      - name: Checkout the latest code
        id: git_checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3

      ## Set some vars to be used in the build process
      - name: Set Vars
        id: set_vars
        run: |
          echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "GITHUB_REF_SHORT=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      ## Setup docker buildx
      - name: Set up Docker Buildx
        id: setup_buildx
        uses: docker/setup-buildx-action@4c0219f9ac95b02789c1075625400b2acbff50b1 # v2.9.1

      ## Build the binaries using defined dockerfiles
      - name: Build Binary (${{ matrix.platform }})
        id: build_binaries
        uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825 # v4.1.1
        with:
          file: build-scripts/Dockerfile.${{ matrix.platform }}
          outputs: type=local,dest=./release/${{ matrix.platform }}
          build-args: |
            OS_ARCH=${{ matrix.platform }}
            GIT_BRANCH=${{ env.GITHUB_REF_SHORT }}
            GIT_COMMIT=${{ env.GITHUB_SHA_SHORT }}

      ## Compress the artifact
      - name: Compress artifact
        id: compress_artifact
        run: zip --junk-paths ${{ matrix.platform }} ./release/${{ matrix.platform }}/*

      ## Upload the artifact to the github action (used in `github-release.yml` to create a release)
      - name: Upload artifact
        id: upload_artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          path: ${{ matrix.platform }}.zip
