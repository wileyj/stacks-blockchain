## Github workflow to run epoch tests

name: Tests::Epoch

on:
  workflow_call:

defaults:
  run:
    shell: bash

env:
  BITCOIND_TEST: 1
  RUST_BACKTRACE: full
  SEGMENT_DOWNLOAD_TIMEOUT_MINS: 15

concurrency:
  group: epoch-tests-${{ github.workflow }}-${{ github.ref }}
  # Only cancel in progress if this is for a PR
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  # epoch tests with code coverage
  epoch-tests:
    name: Epoch Tests
    runs-on: ubuntu-latest
    ## partition the tests in 8 shards
    strategy:
      fail-fast: false
      matrix:
        partition: [1, 2, 3, 4, 5, 6, 7, 8] # partition the tests into 4 jobs
    steps:
      ## Checkout the code
      - name: Checkout the latest code
        id: git_checkout
        uses: actions/checkout@v3

      ## Install rust toolchain (llvm-tools-preview)
      - name: Setup Rust Toolchain
        id: setup_rust_toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: llvm-tools-preview
          cache: false

      ## Restore cargo cache data
      - name: Restore Cargo Cache
        id: restore_cargo_cache
        uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ github.event.repository.name }}-cargo
          # key: ${{ github.event.repository.name }}-${{ github.sha }}-cargo

      ## Restore bitcoin cache data
      - name: Restore Bitcoin Binary Cache
        id: restore_bitcoin_cache
        uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          path: /tmp/bitcoin
          key: ${{ github.event.repository.name }}-bitcoin-binaries

      ## Restore test archive cache data
      - name: Restore Test Archive Cache
        id: restore_test-archive_cache
        uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          path: /tmp/test_archive.tar.zst
          key: ${{ github.event.repository.name }}-test-archive
          # key: ${{ github.event.repository.name }}-${{ github.sha }}-test-archive

      ## Restore target cache data
      - name: Restore Target Cache
        id: restore_target_cache
        uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          path: ./target
          key: ${{ github.event.repository.name }}-target
          # key: ${{ github.event.repository.name }}-${{ github.sha }}-target

      ## Symlink bitoind to $PATH
      - name: Link Bitcoin Binary
        id: bitcoin_binary
        run: |
          sudo ln -s /tmp/bitcoin/bin/bitcoind /bin/
          ls -al /bin/bitcoind

      ## Run matrix test
      - name: Run Tests
        id: run_tests
        timeout-minutes: 30
        run: |
          cargo nextest run \
            --test-threads 1 \
            --run-ignored all \
            --retries 2 \
            --final-status-level fail \
            --fail-fast \
            --archive-file /tmp/test_archive.tar.zst \
            --partition count:${{ matrix.partition }}/8 \
            -E '(
              test(/^tests::epoch_2*/) &
              not test(/^tests::epoch_21::test_pox_reorg_flap_duel/) &
              not test(/^tests::epoch_21::test_pox_reorg_flap_reward_cycles/)
            )'

      ## Generate code coverage using grcov
      - name: Run grcov
        id: run_grcov
        run: |
          grcov . --binary-path ./target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore "/*" -o lcov.info || exit 1
          echo "created=true\n" >> $GITHUB_OUTPUT

      ## Upload coverage to codecov
      ##   - use wretry action, to retry on a failed upload
      - name: Upload Code Coverage
        id: code_coverage
        uses: Wandalen/wretry.action@a163f62ae554a8f3cbe27b23db15b60c0ae2e93c
        with:
          action: codecov/codecov-action@v3
          with: |
            files: ./lcov.info
            name: epoch_tests
            fail_ci_if_error: false
            verbose: true
          attempt_limit: 3
          attempt_delay: 10000
