## Github workflow to run full genesis and unit tests

name: Tests::Stacks Blockchain

on:
  workflow_call:

defaults:
  run:
    shell: bash

env:
  BITCOIND_TEST: 1
  RUST_BACKTRACE: full
  SEGMENT_DOWNLOAD_TIMEOUT_MINS: 3
  RETRIES: 3
  RETRY_DELAY: 10000

concurrency:
  group: stacks-blockchain-tests-${{ github.workflow }}-${{ github.ref }}
  # Only cancel in progress if this is for a PR
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  # Full genesis test with code coverage
  full-genesis:
    name: Full Genesis Test
    runs-on: ubuntu-latest
    ## continue tests even if we have a failure
    continue-on-error: true
    ## run a maximum of 2 concurrent tests from the test matrix
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        test-name:
          - neon_integrations::bitcoind_integration_test
    steps:
      ## Setup test environment
      - name:  Setup Test Environment
        id: setup_tests
        uses: wileyj/actions/stacks-blockchain/testenv@main
        with:
            genesis: true

      ## Run test matrix using cached archive file
      - name: Run Tests
        id: run_tests
        run: |
          cargo nextest run \
            --test-threads 1 \
            --run-ignored all \
            --retries 2 \
            --final-status-level fail \
            --archive-file /tmp/genesis_archive.tar.zst \
            "${{ matrix.test-name }}"

      ## Upload code coverage
      - name: Code Coverage
        id: codecov
        uses: wileyj/actions/codecov@main
        with:
          test-name: large_genesis
          filename: ./lcov.info

  # unit tests with code coverage
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    ## continue tests even if we have a failure
    continue-on-error: true
    ## partition the tests in 8 shards
    strategy:
      ## continue with the matrix even if we've had a failure
      fail-fast: false
      matrix:
        partition: [1, 2, 3, 4, 5, 6, 7, 8] # partition the tests into 8 jobs
    steps:
      ## Setup test environment
      - name:  Setup Test Environment
        id: setup_tests
        uses: wileyj/actions/stacks-blockchain/testenv@main

      ## Run test shards using cached archive file (defined as matrix.partition)
      ##   - timeout after 30 minutes
      - name: Run Tests
        id: run_tests
        timeout-minutes: 30
        run: |
          cargo nextest run \
            --test-threads num-cpus \
            --retries 2 \
            --final-status-level fail \
            --fail-fast \
            --archive-file /tmp/test_archive.tar.zst \
            --partition count:${{ matrix.partition }}/8

      ## Create and upload code coverage
      - name: Code Coverage
        id: codecov
        uses: wileyj/actions/codecov@main
        with:
          test-name: ${{ matrix.test-name }}

  ## Generate and upload openapi html artifact
  open-api-validation:
    name: OpenAPI Validation
    runs-on: ubuntu-latest
    steps:
      - name: OpenAPI
        id: openapi
        uses: wileyj/actions/openapi@main
        with:
          input: ./docs/rpc/openapi.yaml
          output: ./open-api-docs.html

  ## Disabled
  ##   - this test can take several hours to run
  nettest:
    if: ${{ false }}
    name: Net-Test
    runs-on: ubuntu-latest
    steps:
      ## checkout the code
      - name: Checkout the latest code
        id: git_checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Run network relay tests
        id: nettest
        env:
          DOCKER_BUILDKIT: 1
        run: docker build -f ./.github/actions/bitcoin-int-tests/Dockerfile.net-tests .

  # Core contract tests
  core-contracts-clarinet-test:
    name: Core Contracts Test
    runs-on: ubuntu-latest
    steps:
      ## Checkout the code
      - name: Checkout the latest code
        id: git_checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      ## Use Clarinet to run contract unit-tests
      - name: Execute core contract unit tests in Clarinet
        id: clarinet_unit_test
        uses: docker://hirosystems/clarinet:1.8.0
        with:
          args: test --coverage --manifest-path=./contrib/core-contract-tests/Clarinet.toml

      ## Upload code coverage
      - name: Code Coverage
        id: codecov
        uses: wileyj/actions/codecov@main
        with:
          test-name: ${{ matrix.test-name }}
          upload-only: true
          filename: ./coverage.lcov
